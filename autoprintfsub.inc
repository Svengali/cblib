

inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt)
{
	String s = autoToString(fmt);
	APF_CALL_SUB( s );
}

template < typename T1 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1)
{
	String s = autoToString(fmt,arg1);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2)
{
	String s = autoToString(fmt,arg1, arg2);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3)
{
	String s = autoToString(fmt,arg1, arg2, arg3);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6, arg7);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18);
	APF_CALL_SUB( s );
}

template < typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19 >
inline void APF_CALLER ( APF_CALLER_PREARG const char * fmt , T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, T17 arg17, T18 arg18, T19 arg19)
{
	String s = autoToString(fmt,arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19);
	APF_CALL_SUB( s );
}
